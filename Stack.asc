
String StackDataDelimiter;
String StackDataFormat;
String StackDataCopyFormat;
int StackDataCopyID = 0;

StackDataType GetType(this StackData*) {
  StackData type = this.Substring(0, StackDataFormat.Length - 1);
  return type.Chars[type.IndexOf(":") + 1];
}

int GetAsInt(this StackData*) {
  StackData data = this.Substring(StackDataFormat.Length - 1, this.Length);
  StackDataType type = data.GetType();
  if (((type != eStackDataInt) && (eStackStrictTypes)) || (type == eStackDataStack)) return 0;
  return data.AsInt;
}

float GetAsFloat(this StackData*) {
  StackData data = this.Substring(StackDataFormat.Length - 1, this.Length);
  StackDataType type = data.GetType();
  if (((type != eStackDataFloat) && (eStackStrictTypes)) || (type == eStackDataStack)) return 0.0;
  return data.AsFloat;
}

String GetAsString(this StackData*) {
  StackDataType type = this.GetType();
  if (((type != eStackDataString) && (eStackStrictTypes)) || (type == eStackDataStack)) return null;
  return this.Substring(StackDataFormat.Length - 1, this.Length);
}

Character* GetAsCharacter(this StackData*) {
  StackData data = this.Substring(StackDataFormat.Length - 1, this.Length);
  StackDataType type = data.GetType();
  if ((data.AsInt < 0) || (data.AsInt >= Game.CharacterCount) ||
  ((type != eStackDataCharacter) && (eStackStrictTypes)) || (type == eStackDataStack)) return null;
  return character[data.AsInt];
}

InventoryItem* GetAsInventoryItem(this StackData*) {
  StackData data = this.Substring(StackDataFormat.Length - 1, this.Length);
  StackDataType type = data.GetType();
  if ((data.AsInt <= 0) || (data.AsInt > Game.InventoryItemCount) ||
  ((type != eStackDataInventoryItem) && (eStackStrictTypes)) || (type == eStackDataStack)) return null;
  return inventory[data.AsInt];
}

GUI* GetAsGUI(this StackData*) {
  StackData data = this.Substring(StackDataFormat.Length - 1, this.Length);
  StackDataType type = data.GetType();
  if ((data.AsInt < 0) || (data.AsInt >= Game.GUICount) ||
  ((type != eStackDataGUI) && (eStackStrictTypes)) || (type == eStackDataStack)) return null;
  return gui[data.AsInt];
}

GUIControl* GetAsGUIControl(this StackData*) {
  StackData data = this.Substring(StackDataFormat.Length - 1, this.Length);
  StackDataType type = data.GetType();
  if ((data.AsInt < 0) || (data.AsInt >= (Game.GUICount * AGS_MAX_CONTROLS_PER_GUI))) return null;
  int guiID = data.AsInt / AGS_MAX_CONTROLS_PER_GUI;
  int controlID = data.AsInt % AGS_MAX_CONTROLS_PER_GUI;
  if ((guiID >= Game.GUICount) || (controlID >= AGS_MAX_CONTROLS_PER_GUI) ||
  ((type != eStackDataGUIControl) && (eStackStrictTypes)) || (type == eStackDataStack)) return null;
  return gui[guiID].Controls[controlID];
}

static StackData Stack::IntToData(int theInt) {
  StackData type = StackData.Format(StackDataFormat, eStackDataInt);
  return StackData.Format("%s%d", type, theInt);
}

static StackData Stack::FloatToData(float theFloat) {
  StackData type = StackData.Format(StackDataFormat, eStackDataFloat);
  return StackData.Format("%s%f", type, theFloat);
}

static StackData Stack::StringToData(String theString) {
  StackData type = StackData.Format(StackDataFormat, eStackDataString);
  return type.Append(theString);
}

static StackData Stack::CharacterToData(Character *theCharacter) {
  if (theCharacter == null) return null;
  StackData type = StackData.Format(StackDataFormat, eStackDataCharacter);
  return StackData.Format("%s%d", type, theCharacter.ID);
}

static StackData Stack::InventoryItemToData(InventoryItem *theItem) {
  if (theItem == null) return null;
  StackData type = StackData.Format(StackDataFormat, eStackDataInventoryItem);
  return StackData.Format("%s%d", type, theItem.ID);
}

static StackData Stack::GUIToData(GUI *theGUI) {
  if (theGUI == null) return null;
  StackData type = StackData.Format(StackDataFormat, eStackDataGUI);
  return StackData.Format("%s%d", type, theGUI.ID);
}

static StackData Stack::GUIControlToData(GUIControl *theControl) {
  if (theControl == null) return null;
  StackData type = StackData.Format(StackDataFormat, eStackDataGUIControl);
  return StackData.Format("%s%d", type, ((theControl.OwningGUI.ID * AGS_MAX_CONTROLS_PER_GUI) + theControl.ID));
}

StackData StackDataMergeArray(StackData array[]) {
  if ((array == null) || (StackData.IsNullOrEmpty(array[0])) || (array[0].AsInt <= 0)) return null;
  StackData glue = StackDataDelimiter;
  StackData buffer = "";
  int i = 1;
  int size = array[0].AsInt;
  while (i <= size) {
    buffer = buffer.Append(array[i]);
    if (i < size) buffer = buffer.Append(glue);
    i++;
  }
  return buffer;
}

StackData[] SplitDataByItems(this Stack*) {
  if (this.Data == null) return null;
  StackData items[] = new StackData[this.ItemCount + 1];
  items[0] = StackData.Format("%d", this.ItemCount);
  StackData buffer = this.Data;
  String format = StackDataFormat.Substring(0, StackDataFormat.IndexOf(":") + 1);
  int i = buffer.IndexOf(format);
  int j = 1;
  while ((i != -1) && (j <= this.ItemCount)) {
    StackDataType type = buffer.Chars[format.Length];
    if (type == eStackDataStack) {
      StackData temp = buffer.Substring(StackDataFormat.Length - 1, buffer.Length);
      StackData stamp = temp.Substring(0, StackDataCopyFormat.IndexOf(":") + 1);
      i = stamp.Length;
      while ((temp.Chars[i] >= '0') && (temp.Chars[i] <= '9')) {
        stamp = stamp.AppendChar(temp.Chars[i]);
        i++;
      }
      stamp = stamp.Append(StackDataCopyFormat.Substring(StackDataCopyFormat.IndexOf(":%d") + 3, StackDataCopyFormat.Length));
      temp = temp.Substring(stamp.Length, temp.Length);
      i = temp.IndexOf(stamp);
      if (i != -1) items[j] = buffer.Truncate(i + (StackDataFormat.Length - 1) + (stamp.Length * 2));
      else items[j] = buffer;
      if ((i != -1) && ((i + (StackDataFormat.Length - 1) + (stamp.Length * 2) + StackDataDelimiter.Length) < buffer.Length)) {
        buffer = buffer.Substring(i + (StackDataFormat.Length - 1) + (stamp.Length * 2) + StackDataDelimiter.Length, buffer.Length);
      }
      else buffer = null;
      j++;
    }
    else {
      i = buffer.IndexOf(StackDataDelimiter);
      if (i != -1) items[j] = buffer.Substring(0, i);
      else items[j] = buffer;
      if ((i != -1) && ((i + StackDataDelimiter.Length) < buffer.Length)) {
        buffer = buffer.Substring(i + StackDataDelimiter.Length, buffer.Length);
      }
      else buffer = null;
      j++;
    }
    if (buffer != null) i = buffer.IndexOf(format);
    else i = -1;
  }
  return items;
}

bool Stack::Push(StackData data, int index) {
  if ((index == SCR_NO_VALUE) || (index > this.ItemCount)) index = this.ItemCount;
  if ((index < 0) || (data == null)) return false;
  if (StackData.IsNullOrEmpty(this.Data)) {
    this.Data = data;
    this.ItemCount++;
    return true;
  }
  StackData items[] = this.SplitDataByItems();
  int size = items[0].AsInt;
  if (index < size) items[index + 1] = data;
  this.Data = StackDataMergeArray(items);
  if (index >= size) this.Data = this.Data.Append(StackDataDelimiter.Append(data));
  this.ItemCount++;
  return true;
}

StackData Stack::Pop(bool remove, int index) {
  if (index == SCR_NO_VALUE) {
    if (this.PopType == eStackPopFirstInFirstOut) index = 0;
    else if (this.PopType == eStackPopFirstInLastOut) index = (this.ItemCount - 1);
    else if (this.PopType == eStackPopRandom) index = Random(this.ItemCount - 1);
  }
  if ((index < 0) || (index >= this.ItemCount) || (!this.ItemCount) ||
  (StackData.IsNullOrEmpty(this.Data))) return null;
  StackData items[] = this.SplitDataByItems();
  int size = items[0].AsInt;
  if (index >= size) return null;
  StackData data = items[index + 1];
  if (remove) {
    this.ItemCount--;
    if ((!this.ItemCount) || (size == 1)) {
      this.Data = null;
      items = null; // prevent AGS 3.1.2 bug - Object not in managed pool.
      return data;
    }
    StackData buffer[] = new StackData[size];
    int i = 1;
    while (i < size) {
      if (i <= index) buffer[i] = items[i];
      else buffer[i] = items[i + 1];
      i++;
    }
    buffer[0] = StackData.Format("%d", size - 1);
    items = buffer;
  }
  this.Data = StackDataMergeArray(items);
  items = null; // prevent AGS 3.1.2 bug - Object not in managed pool.
  return data;
}

void Stack::Clear() {
  this.Data = null;
  this.ItemCount = 0;
}

bool Stack::IsEmpty() {
  return (!this.ItemCount);
}

StackData Stack::Copy() {
  StackData type = StackData.Format(StackDataFormat, eStackDataStack);
  StackData stamp = StackData.Format(StackDataCopyFormat, StackDataCopyID);
  StackDataCopyID++;
  StackData data = this.Data;
  if (data == null) data = "";
  return StackData.Format("%s%s%d,%d,%s%s", type, stamp, this.ItemCount, this.PopType, data, stamp);
}

bool Stack::LoadFromStack(StackData otherStack) {
  if ((otherStack == null) || (otherStack.GetType() != eStackDataStack)) return false;
  StackData data = otherStack.Substring(StackDataFormat.Length - 1, otherStack.Length);
  StackData stamp = data.Substring(0, StackDataCopyFormat.IndexOf(":") + 1);
  int i = stamp.Length;
  while ((data.Chars[i] >= '0') && (data.Chars[i] <= '9')) {
    stamp = stamp.AppendChar(data.Chars[i]);
    i++;
  }
  stamp = stamp.Append(StackDataCopyFormat.Substring(StackDataCopyFormat.IndexOf(":%d") + 3, StackDataCopyFormat.Length));
  data = data.Substring(stamp.Length, data.Length);
  data = data.Truncate(data.IndexOf(stamp));
  StackData buffer = data.Substring(0, data.IndexOf(","));
  this.ItemCount = buffer.AsInt;
  data = data.Substring(buffer.Length + 1, data.Length);
  buffer = data.Substring(0, data.IndexOf(","));
  this.PopType = buffer.AsInt;
  this.Data = data.Substring(buffer.Length + 1, data.Length);
  return true;
}

function game_start() {
  StackDataDelimiter = "**STACKDATA**";
  StackDataFormat = "**STACKDATA:%c**";
  StackDataCopyFormat = "**STACKDATA STACK:%d**";
}
